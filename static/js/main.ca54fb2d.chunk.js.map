{"version":3,"sources":["components/Menu.js","App.js","reportWebVitals.js","components/Landing.js","components/Header.js","index.js"],"names":["Menu","setLineColor","setLineWidth","setLineOpacity","className","type","onChange","event","target","value","min","max","App","canvasRef","useRef","ctxRef","useState","isDrawing","setIsDrawing","lineColor","lineWidth","lineOpacity","useEffect","ctx","current","getContext","lineCap","lineJoin","globalAlpha","strokeStyle","onMouseDown","beginPath","moveTo","nativeEvent","offsetX","offsetY","onMouseUp","closePath","onMouseMove","lineTo","stroke","ref","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Landing","Header","Navbar","bg","variant","expand","Container","Brand","href","Toggle","Collapse","id","Nav","Link","ReactDOM","render","StrictMode","exact","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.ca54fb2d.chunk.js","sourcesContent":["import React from 'react'\nimport './../App.css'\n\nconst Menu = ({ setLineColor, setLineWidth, setLineOpacity }) => {\n    return (\n        <div className=\"Menu\">\n            <label>Brush Color</label>\n            <input\n                type='color'\n                onChange={(event) => {\n                    setLineColor(event.target.value)\n                }}\n            />\n            <label>Brush Width</label>\n            <input\n                type='range'\n                min='3'\n                max='20'\n                onChange={(event) => {\n                    setLineWidth(event.target.value)\n                }}\n            />\n            <label>Brush Opacity</label>\n            <input\n                type='range'\n                min='1'\n                max='100'\n                onChange={(event) => {\n                    setLineOpacity(event.target.value / 100)\n                }}\n            />\n        </div>\n    )\n}\n\nexport default Menu","import { useEffect, useRef, useState } from 'react';\nimport Menu from './components/Menu'\nimport './App.css';\n\nfunction App() {\n  const canvasRef = useRef(null)\n  const ctxRef = useRef(null)\n  const [isDrawing, setIsDrawing] = useState(false)\n  const [lineColor, setLineColor] = useState('black')\n  const [lineWidth, setLineWidth] = useState(5)\n  const [lineOpacity, setLineOpacity] = useState(0.1)\n\n  // initialization when component mounds for the first time\n  useEffect(() => {\n    // set canvas variable equal to current value of convasRef which is null\n    const canvas = canvasRef.current\n    // canvas.width = window.innerWidth * 2\n    // canvas.height = window.innerHeight * 2\n    // canvas.style.width = `${window.innerWidth}px`\n    // canvas.style.height = `${window.innerHeight}px`\n    // htmlcanvasElement.getContext() method returns a drawing context on the canvas. `2d` represents a two dimensional rendering context. Variable ctx instead of 'context'\n    const ctx = canvas.getContext('2d')\n    // CanvasRenderingContext2D.lineCap property of Canvas 2D api determines the shape used to draw the end points of lines\n    ctx.lineCap = 'round'\n    // determins the shape used to join two line segments where they meet\n    ctx.lineJoin = 'round'\n    // specifies the aplha(transparency) value applied to shapes and images drawn onto canvas\n    ctx.globalAlpha = lineOpacity\n    // specifies color, gradient, or pattern to use for the strokes(outlines) around shapes. Default is #000 black\n    ctx.strokeStyle = lineColor\n    // sets the thickness of lines\n    ctx.lineWidth = lineWidth\n    // set ctxRef current to ctx\n    ctxRef.current = ctx\n    // rerender when lineColor, lineOpacity, lineWidth changes\n  }, [lineColor, lineOpacity, lineWidth])\n\n  // function to start the drawing\n  const startDrawing = (event) => {\n    // .beginPath() method starts a new path by emptying the list of subpaths. Call this method to create a new path.\n    ctxRef.current.beginPath()\n    // .moveTo() begins new subpath at point specified by given (x,y) coordinates\n    ctxRef.current.moveTo(\n      // provides the offset int he x coordinate of the mouse pointer between that event and the padding edge of the target node\n      event.nativeEvent.offsetX,\n      event.nativeEvent.offsetY\n    )\n    // set setIsDrawing to boolean value of true\n    setIsDrawing(true)\n  }\n\n  // function for ending the drawing\n  const endDrawing = () => {\n    ctxRef.current.closePath()\n    setIsDrawing(false)\n  }\n\n  // function for actively drawing\n  const draw = (event) => {\n    // work clause to reduce nesting. If not drawing then return\n    if (!isDrawing) {\n      return\n    }\n    ctxRef.current.lineTo(\n      event.nativeEvent.offsetX,\n      event.nativeEvent.offsetY\n    )\n    ctxRef.current.stroke()\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Paint App</h1>\n      <div className=\"draw-area\">\n        <Menu\n          setLineColor={setLineColor}\n          setLineWidth={setLineWidth}\n          setLineOpacity={setLineOpacity}\n        />\n        <canvas\n          onMouseDown={startDrawing}\n          onMouseUp={endDrawing}\n          onMouseMove={draw}\n          ref={canvasRef}\n          width={`852px`}\n          height={`480px`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Fragment } from 'react'\n// import reactDom from 'react-dom'\n\n// import Header from './Header'\n\nconst Landing = () => {\n    return (\n        <Fragment>\n            {/* <Header /> */}\n            <h1>Landing Page</h1>\n        </Fragment>\n    )\n}\n\nexport default Landing","import React, { Fragment } from 'react'\nimport Nav from 'react-bootstrap/nav'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Container from 'react-bootstrap/Container'\n\nconst Header = () => {\n    return (\n        // <nav>\n        //     <ul>\n        //         <a href=\"#\">Click Me</a>\n        //     </ul>\n        // </nav>\n    // <Navbar bg='primary' variant='dark' expand='md'>\n    //     <Navbar.brand href=\"#\">\n    //         Paint Your Soul\n    //     </Navbar.brand>\n    //     <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    //     <Navbar.Collapse id=\"basic-navbar-nav\">\n    //         <Nav className=\"ml-auto\">\n    //             <Nav.Link href=\"#/\">Home</Nav.Link>\n    //             <Nav.Link href=\"#/paint\">Paint and Play</Nav.Link>\n    //         </Nav>\n    //     </Navbar.Collapse>\n    // </Navbar>\n    <Navbar bg=\"light\" variant='light' expand=\"lg\">\n        <Container>\n        <Navbar.Brand href=\"/paint-app/\">Landing Page</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"me-auto\">\n            <Nav.Link href=\"/paint-app/\">Home</Nav.Link>\n            <Nav.Link href=\"/paint-app/paint\">Paint and Play</Nav.Link>\n        </Nav>\n        </Navbar.Collapse>\n        </Container>\n    </Navbar>\n    )\n}\n\nexport default Header","import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom'\n\nimport Landing from './components/Landing'\nimport Header from './components/Header'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Header />\n      <Routes>\n        <Route exact path='paint-app/' element={<Landing />} />\n        <Route exact path='paint-app/paint' element={<App />} />\n      </Routes>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}